<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>ESP WebSocket Console </title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" type="text/css" href=".css/style.css">
    <script src=".js/scriptws.js"></script>
    <script src=".js/scriptio.js"></script>
  </head>
  <body >
    <div class="topnav" >
      <h1>ESP tinyConsole</h1>
    </div>
    <div class="content" >

        <!-- Control textarealog .  Begin  rows='15' cols="24"  -->
        <div class="card" id="cardtiles" style = "background-color: eef2c1; ">
          <!-- <div class='card'  id="card-container"></div> -->



           <!--   <p class="card-title">Monitor</p> -->
           <!-- <p class="card-title">ESP32 tinyConsole</p> -->
           <textarea  id="terminal" name="review" style="font-size:20px; "  rows='25' cols="80" 
           onkeypress="textKeypress(event)" onkeydown="textKeydown(event)" onkeyup="textKeyup(event)"></textarea>
           <canvas id="mycanvas"  ></canvas>

          <!-- </div>
          <div> width="640" height="480"-->

              <div class="group">
              <!-- <select name="selectio" id="rcselect" onchange = "updateRowCol(this)" style="width:100px">
              <option id="rc5x16">5x16</option>
              <option id="rc10x32">10x32</option>
              <option id="rc15x40">15x40</option>
              <option id="rc24x48">24x40</option>
              <option id="rc25x80">25x80</option>
              <option id="rc30x96">30x96</option>
              <option id="rc35x102">35x102</option>
              <option id="rc40x118">40x118</option>
              </select>      -->
              <p>
              <audio id="myaudio" controls>
                <source src=".audio/test.mp3" type="audio/mpeg">  Your browser does not support the audio element.
              </audio> 
              <select name="selectio" id="idselect" onchange = "updatefontsize(this)" style="width:100px">
              <!-- <option id="font10">10</option> -->
              <option id="font12">12</option>
              <option id="font15">15</option>
              <option id="font20" selected>20</option>
              <option id="font25">25</option>
              <option id="font30">30</option>
              <option id="font30">35</option>
              </select>     

               <!-- <br> 
              <input type="checkbox" id="canvasck" name="canvasck" onclick='canvaschecked(this);' checked="false" >
              <label for="canvasck">Canvas</label>              <input type="checkbox" id="console" name="console" onclick='consolechecked(this);' checked="true" >
              <label for="console">Console</label>



              -->
              <input type="checkbox" id="scroll" name="scroll" onclick='scrollchecked(this);' checked='true' >
              <label for="scroll">Scroll</label>
              <input type="checkbox" id="switchTouch"  onclick="canvaschecked(this)">
              <label for="switchTouch">Graphics</label>
              <input type="checkbox" id="monitor" name="monitor" onclick='monitorchecked(this);'  >
              <label for="monitor">Monitor</label>             </p>

              

            <!-- </div> -->
          <!--     <input type="checkbox" id="scales" name="scales" onclick='terminallinemode(this);' checked >
            <label for="scales">linemode</label>-->
            <!-- <div class="group"> -->
            <!-- upload begin -->
              <form id= "upload-form"  name = "upload-form"  method="POST" action="/upload"  enctype="multipart/form-data" >
                <input  name="uploadbtn" value="file" type="file"  multiple="true" id= "uploadfiles">
                <button type="submit" onclick="uploadfile(this)" class="button-on">upload</button>
                </form>
              <!-- upload end -->
              <!-- <button name="apple2js" value="apple2js" onclick="apple2js()" class="button-on">apple2js</button> -->
              <button name="timerBtn" value="timerBtn" onclick="sendTime()" class="button-on">SyncTime</button>
              <button name="resetBtn" value="resetBtn" onclick="esprestart()" class="button-on">RESET</button>
              <button name="ctrlcBtn" value="ctrlcBtn" onclick="CTRLCKey('terminal')" class="button-on">ctrl-c</button>
              <button name="clearBtn" value="clearBtn" onclick="clearTextarea('terminal');clearTextarea('consolelog')" class="button-on">Clear</button>

              </div>
  

            <!-- upload begin

              <div class="upload-container">
                <input type="file" id="file_upload"  multiple="true">
              </div> <br>
              <button class="upload-btn">Submit</button>        
           upload end -->

              <!--           upload</button>
  label to change style log . <label name="text" ></label> Endding  
            
              <input type="file" name="data" /><input type="submit" name="upload" value="Upload" title="Upload" >-->
             
        <!-- </div> -->
         
    
          <!-- Control textarealog .  Begin -->
        <!-- <div class="card" style = "background-color: #eef2c1; "> -->
            <p class="card-title" id="consolecard">Web Serial Monitor</p>
            <textarea  id="consolelog" name="review" style="font-size:12px; width:100%"  rows='25' cols="80" ></textarea>
           <!-- Control textarealog .  end -->
        <!-- Control textarea log .  Endding -->
        <!-- Control textarealog .  Begin 
        <div class="card" style = "background-color: #eef2c1; width:640px">
          <p class="card-title">Web Serial Monitor</p>
          <p><textarea  id="consolelog" name="review" style="font-size:10px;"></textarea></p>
          <div> -->
          <!--  <input type="checkbox" id="scroll" name="scroll" onclick='scrollchecked(this);' checked >
            <label for="scroll">scroll</label>
          
                <button name="clearbtn" value="clearbtn" onclick="clearTextarea('consolelog')" >clear</button>
            
                  upload</button>
      label to change style log . <label name="text" ></label> Endding  
            
              <input type="file" name="data" /><input type="submit" name="upload" value="Upload" title="Upload" >
              <button type="submit">upload</button>-->
          <!--  </div>
        
        </div> 
               Control textarealog .  Ending -->

        </div>
    </div>

  <!-- Control textarea log .  Endding -->
  <script>
            // function apple2js() {
            //     window.location.href = 'apple2js.html';
            // }
            const monitor= document.getElementById('switchmonitor');
            function enableCanvas(flag){
              // if (canvasActive) return;
              switchCheckbox.checked = flag;
              if (switchCheckbox.checked) {
                switchToCanvas();
                textarea.style.zIndex = 1;
                mycanvas.style.zIndex = 2;  
                mycanvas.style.display = "block"
              } else {
                switchToTextarea();
                textarea.style.zIndex = 2;
                mycanvas.style.zIndex = 1;
                mycanvas.style.display = "none"
              }
            }
            function esprestart() { // client set ESP32 timer
                var xhr = new XMLHttpRequest();
                //xhr.open("POST", "/"timer?value="+"element.value, true); 
                // console.log(date);
                xhr.open("POST", "/param?reset=0", true); 
                xhr.send();          
            }
            function sendTime() { // client set ESP32 timer
                // console.log("sendTime");

                const date= new Date();
                var xhr = new XMLHttpRequest();
                //xhr.open("POST", "/"timer?value="+"element.value, true); 
                // console.log(date);
                xhr.open("POST", "/param?timer=" + date.getTime(), true); 
                xhr.send();
            }           // download {
            // active time interval task to retrieve output from host, if Host is passive mode

           function  downloadFile(e){
                   // Create anchor element.
                  //  console.log("download");
                  //  console.log(e.data);
                   var a = document.createElement('a'); 
                    // Create the text node for anchor element.
                    var link = document.createTextNode(e.data);
                  // Set the title.
                  a.title = "This is Link"; 
                                    
                  // Set the href property.
                  a.href = e.data;
                  a.download = e.data; 
            
                  // Append the anchor element to the body.
                  // document.body.appendChild(a);                   // Append the text node to anchor element.
                  a.appendChild(link); 
                  a.click();
                  // document.body.removeChild(a);
                  // console.log(a);

          }
 
          function uploadfile(element) {
            var form = document.getElementById('upload-form');
            form.onsubmit = function () {
                var formData = new FormData(form);
                let files = document.getElementById("uploadfiles"); // file from input

                // console.log(files)
                formData.append('file', files);
                var xhr = new XMLHttpRequest();
              
                // Add any event handlers here...
                xhr.open('POST', form.getAttribute('action'), true);
                xhr.send(formData);
              
                // false To avoid actual submission of the form
                // wsSentChar("\n"); // enter for terminal

                return false;
            }
          }
         // ---------------- textarea terminal functions begin -------------------------------

            // for terminal shell
            // SSE output console
            var editor = document.getElementById("terminal");
            var eventk = new CompositionEvent('compositionend');
            var terminalLineMode = true;
            var scrollcheck = true;
            var touchcheck = false;
            var canvascheck = false;
            var consolecheck = false;
            var monitorcheck = false;
            var shiftkey = false;
            var controlkey = false;
            var altkey = false;
            // function terminalInit(){

            // }
            function  disabledefault(event){
              // event.preventDefault(); // prevent enter behavior for correct prompt cursor
    
            }
            var linebuf = "";
            let  cacheLineBuf = new Array("");
            let  cacheIndex = 0;
            var  copyPaste = false;
            var  inComposition = false;

            document.addEventListener('compositionstart', function() {
                inComposition = true;
            });
            document.addEventListener('compositionupdate', function(event) {
                // Handle composition update may be delete Kanji char
                console.log('Composition update:', event.data);
            });
            editor.addEventListener('compositionend',function(e){
                // 中文字碼
                inComposition = false;
                linebuf +=e.data;
            });
            function inCompositionKeyEvent(event){
              if (inComposition) {
                  // Handle key events during composition
                  if (event.key === 'Delete' || event.key === 'Backspace') {
                      // Handle Delete key during composition
                      console.log('Delete key pressed during composition');
                      // Optionally prevent the default behavior
                      event.preventDefault();
                  }
                  return true;
              }
              return false;
            }
            editor.addEventListener('paste', function (e) {
                  // Prevent the default paste action (paste into the textarea)
                  // e.preventDefault();
                  // Get the pasted text from the clipboard
                  const pastedText = (e.clipboardData || window.clipboardData).getData('text');
                  // Iterate through each character in the pasted text
                  linebuf+=pastedText;
                  // wsSentChar('\0xa');

                  // for (let i = 0; i < pastedText.length; i++) {
                  //     const char = pastedText.charAt(i);

                    // Create a new keydown event
                  var keyDownEvent = new KeyboardEvent('keydown', {
                      key: 'Enter', // specify the key you want to simulate
                      code: 'Enter', // specify the key code if needed
                      ctrlKey: false, // specify modifier keys if needed
                      shiftKey: false,
                      altKey: false,
                      metaKey: false,
                      bubbles: true, // event should bubble
                      cancelable: true // event should be cancelable
                  });

                  editor.dispatchEvent(keyDownEvent);

                  //     // Dispatch the keyup event
                  //     editor.dispatchEvent(keyupEvent);
                  // }
              
              }); 
              // editor.addEventListener('input',function(e){
            //     var inputData=editor.value;
            //     linebuf+=inputData;
            // });
            function textKeydown(event){
              var key =  event.keyCode;
                console.log("D:"+key);
                if (inCompositionKeyEvent(event)) return;
                if ((event.metakey && event.key=='c')||(event.crtlkey && event.key=='c')){
                      // copy 
                }
                if ((event.metakey && event.key=='v')||(event.crtlkey && event.key=='v')){
                  copyPaste = true;
                  return;
                }                
                copyPaste = false;
                switch(key){
                  case 16:// shift
                    shiftkey = true;
                    break;
                  case 17:// shift
                    controlkey = true;
                    break;
                  case 18:// shift
                    altkey = true;
                    break;
                  case 37://left
                    event.preventDefault(); // prevent enter behavior for correct prompt cursor
                    break;                    
                  case 38:// up
                    event.preventDefault(); // prevent enter behavior for correct prompt cursor
                    break;    
                  case 39:// right 
                    // event.preventDefault(); // prevent enter behavior for correct prompt cursor
                    break;    
                  case 40: // down
                    // event.preventDefault(); // prevent enter behavior for correct prompt cursor
                    break;   
                  case 8: // backspace
                    break;   
                     
                 }
            }

            function textKeyup(event){
              var key =  event.keyCode;
              var t = document.getElementById("terminal");
                console.log("u:"+key);
                if (inCompositionKeyEvent(event)) return;
                switch(key){
                  case 16:// shift
                    shiftkey = false;
                    break;
                  case 17:// shift
                    controlkey = false;
                    break;
                  case 18:// shift
                    altkey = false;
                    break;
                  case 8:// backspace
                    altkey = false;
                    linebuf=linebuf.slice(0, -1);
                    break;
                  case 38: // up
                    if (cacheIndex>0) cacheIndex--;
                    linebuf = cacheLineBuf.at(cacheIndex);
                    // console.log(cacheLineBuf);
                    // console.log(linebuf);
                    
                    t.value = t.value.slice(0,terminalData)+ linebuf;
                    return;
                  case 40: // down
                    if (cacheIndex<cacheLineBuf.length-1) cacheIndex++;
                    // console.log(cacheLineBuf);
                    // console.log(linebuf);
                    linebuf = cacheLineBuf.at(cacheIndex);
                    t.value = t.value.slice(0,terminalData)+ linebuf;
                    return;
                  }
                }
                String.prototype.hexEncode = function(){
                    var hex, i;

                    var result = "";
                    for (i=0; i<this.length; i++) {
                        hex = this.charCodeAt(i).toString(16);
                        result += ("000"+hex).slice(-4);
                    }

                    return result;
                }
                String.prototype.convertToHex = function (delim) {
                         return this.split("").map(function(c) {
                         return ("0" + c.charCodeAt(0).toString(16)).slice(-2);
                }).join(delim || "");}
            function textKeypress(event){
              var key =  event.keyCode;
                c = String.fromCharCode(key);
                if (inCompositionKeyEvent(event)) return;
                if (event.metaKey && (c=='c'|| c=='v')) return;
                if (event.crtlkey && (c=='c'|| c=='v')) return;
                // if (isCommandOrCtrlPressed && c=='v') return; // ignore paste key
                // console.log(key);
                // console.log(linebuf.length);
                if ( (c == '\xff' || c == '\x08') && linebuf.length>1) {
                  linebuf = (linebuf.slice(0, -1));
                  console.log(c);
                  console.log(linebuf);
                  return ; 
                }
                if (c == '\r' || c == '\n'|| c == ' ' || c == -1 || c=='#' ||c=='q' ||c=='Q'|| c=='\x1b' || c=='\x03'){
                  if ( c == '\r') {
                     event.preventDefault();
                     // linebuf = linebuf.concat('\n');
                  }
                  if (c == '\r' || c == '\n') linebuf = linebuf.concat('\n');
                  if (c == '#' || c == '\x1b' ||c == '\x03' || c == ' ' ||c == 'q'|| c=='Q'  ) linebuf = linebuf.concat(c);

                  // console.log(linebuf);
                  // console.log(ascii_to_hexa(linebuf));
                  // console.log(linebuf.hexEncode());
                  // console.log(linebuf.convertToHex(" "));
                  if (c=='\r' || c == '#' || c == '\x1b' ||c == '\x03' ||c == 'q'|| c=='Q'  ){ 
                    // q is keyhit sent immediately
                    // if (terminalLineMode ) {
                        if (linebuf.length>1 && linebuf.slice(0,1)=="\0xd"){
                          console.log("leading xd found");
                        }
                         wsSentChar(linebuf);
                        if (linebuf.length>=2) { // more than one key 
                          cacheLineBuf.pop();
                          if (cacheLineBuf.length>=25) {
                            cacheLineBuf.shift();
                          }
                          cacheLineBuf.push(linebuf.slice(0,-1));  // add cacheBuffer
                          cacheLineBuf.push("");  // add cacheBuffer
                         // cacheIndex = cacheLineBuf.length;
                          // console.log(cacheLineBuf);
                          cacheIndex = cacheLineBuf.length-1;
                        }
                    // }else{
                    //     console.log("char mode");
                    //     wsSentChar(linebuf);
                    // }
                    linebuf = "";                  
                  } 
              

                  // linebuf = linebuf.concat('\x0a');

                  // event.preventDefault(); // prevent enter behavior for correct prompt cursor
                  // console.log("enter:");
                  // var text = document.getElementById("terminal").value;
                  // var lines = text.split('\n');
                  // var last = lines[lines.length-1].replace(/[\r|\n|%]+/g,"");
                  // console.log(lines);
                  // console.log(last);
                  // document.getElementById("terminal").value = text ;
                  // document.getElementById("terminal").scrollTop = document.getElementById("terminal").scrollHeight;
                 
                  // var xhr = new XMLHttpRequest();
                  // //xhr.open("POST", "/"param?gpio="+"element.value, true); 
                  // xhr.open("POST", "/param?cmd="+lines[lines.length-1], true); 
                  // xhr.send();
                }else{
                  if (copyPaste) {
                    console.log(c);
                  }
                  linebuf = linebuf.concat(c);
                }
          
                // console.log(typeof linebuf);
                // console.log(linebuf);
              
              }

            // function showCanvasCursor(){
            //   const canvas = document.getElementById('mycanvas');
            //   const ctx = canvas.getContext('2d');

            //   // Load and draw a custom cursor image
            //   const cursorImage = new Image();
            //   cursorImage.src = '.image/cursor64.png';

            //   // Track mouse movement and update the custom cursor position
            //   canvas.addEventListener('mousemove', (e) => {
            //       const cursorX = e.clientX - canvas.getBoundingClientRect().left;
            //       const cursorY = e.clientY - canvas.getBoundingClientRect().top;

            //       ctx.clearRect(0, 0, canvas.width, canvas.height);
            //       ctx.drawImage(cursorImage, cursorX, cursorY, 32, 32); // Adjust width and height as needed
            //   });
            // }
            function clearTextarea(byid) {
              document.getElementById(byid).value = "";
              // document.getElementById("consolelog").value = ""; 
              wsSentChar("\n"); // enter for terminal
            }
            function CTRLCKey() {             
              wsSentChar("\x03\n"); // enter for terminal
            } 
            function consolechecked() {
              var terminal = document.getElementById("terminal");
              consolecheck = ! consolecheck;
              terminal.style.display = (consolecheck) ? 'block':'none';
            }    
            function canvaschecked() {
              var canvaso = document.getElementById("mycanvas");
              canvascheck = ! canvascheck;
              canvaso.style.display = (canvascheck) ? 'block':'none';
            }    
            function monitorchecked() {
              var monitor = document.getElementById("consolelog");
              monitorcheck = ! monitorcheck;
              monitor.style.display = (monitorcheck) ? 'block':'none';
            }    
            function scrollchecked() {
              scrollcheck = ! scrollcheck;
            }
            function touchchecked() {
              touchcheck = ! touchcheck;
              TouchEnable();
            }
            function terminallinemode() {
              terminalLineMode = ! terminalLineMode;
            }
            function checkEscCommand(seq){
                // console.log("ESC check");
                var eschex = seq.convertToHex();
                // console.log(seq.hexEncode());
                if (eschex == "1b5b324a") {
                  // console.log("ESC Found");
                  wsSentChar("\r"); // clear screen sent enter
                  return true;
                }
                return false;
            }
            function updateTextarea(txt) {
                var txtValue = document.getElementById("terminal").value;
                var inmsg= txt; //window.atob(txt);
                // console.log("terminal");
                // console.log(inmsg);
                if (checkEscCommand(inmsg)) { // clear screen
                   document.getElementById("terminal").value = "";
                }else{
  

                  // BUG 將 UTF-8 編碼的字節序列解碼為UTF16文字

                  var utf8Bytes = convertUtf8.stringToBytes(inmsg);
                  console.log(utf8Bytes);
                  var unicodeString=convertUtf8.utf8BytesToUtf16String(utf8Bytes);
                  console.log(unicodeString);
                 document.getElementById("terminal").value += unicodeString ;
                }
                terminalData = document.getElementById("terminal").value.length; // keep data before keyin

                if (scrollcheck){
                  document.getElementById("terminal").scrollTop = document.getElementById("terminal").scrollHeight;
                }
                monitorchecked();
                monitorchecked(); // sync checked
                
            }
            function updateConsoleLog(txt) {
                if (!monitorcheck) return; 
                var txtValue = document.getElementById("consolelog").value;
                console.log("consolelog");
                console.log(txtValue);
                document.getElementById("consolelog").value += txt; //window.atob(txt
                if (scrollcheck){
                  document.getElementById("consolelog").scrollTop = document.getElementById("consolelog").scrollHeight;
                }
            }
            function MonitorConsoleLog(txt) {
              if (!monitorcheck) return; 
                var txtValue = document.getElementById("consolelog").value;
                document.getElementById("consolelog").value += txt + "\n";
                if (scrollcheck){
                  document.getElementById("consolelog").scrollTop = document.getElementById("consolelog").scrollHeight;
                }
            }
            // change Textarea Style
            function updateRowCol(element) {
              var rowcol = document.getElementById("rcselect").value;
              const cardtiles = document.getElementById('cardtiles');
              const cardWidth = cardtiles.offsetWidth;
              const cardHeight = cardWidth * 3/4;    
                    // var selectValue = document.getElementById("terminal").value;
                    var rowcols = rowcol.split('x');
                    // console.log(rowcol);
                    // console.log(rowcols);
                    // console.log(rowcols[0]);
                    // console.log(rowcols[1]);
                    document.getElementById("terminal").style.height = (parseInt(rowcols[0])*2).toString+"em";
                    document.getElementById("terminal").style.width =  "100%";// "rowcols[1]+"em";            
                    document.getElementById("consolelog").style.height  = "75%"; // (parseInt(rowcols[0])*2).toString+"em";                 
                    document.getElementById("consolelog").style.width  = (parseInt(rowcols[0])*2).toString+"em";
                    // document.getElementById("mycanvas").style.width  =  "100%";//  rowcols[1]+"em";
                    // document.getElementById("mycanvas").style.height  =  "75%";//  rowcols[1]+"em";
            }
            var screenwidth;
            function updatefontsize(element) {
                    const cardtiles = document.getElementById('cardtiles');
                    var fontsize = document.getElementById("idselect").value;
                    var selectValue = document.getElementById("terminal").value;
                    var textareao =document.getElementById("terminal");
                    var relativeh = textareao.offsetWidth * 0.75;
                    textareao.style.fontSize = fontsize + "px";
                    document.getElementById("consolelog").style = "font-size:" + fontsize + "px;"+ "width:100%;";

                    // mycavas1.style.width  =  textareao.offsetWidth + "px";//  rowcols[1]+"em";
                    // mycavas1.style.height  =  relativeh + "px";//  rowcols[1]+"em";
   // Get the element by its ID or any other method
  //  var mycanvas1 =document.getElementById("mycanvas");
  // canvasAspectRatio();


// // Get the screen width
// screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
// var screenHeight = (screenWidth<640) ? screenWidth*0.75:480;

// // Set the element width based on the screen resolution
// mycanvas1.style.width = (screenWidth < 640) ? screenWidth + 'px' : '640px';
// mycanvas1.style.height = screenHeight + 'px';
                }
            // ---------------- textarea terminal functions end -------------------------------

 
//  Server Sent Event (SSE) Listener Handle      
          if (!!window.EventSource) {
          var source = new EventSource('/events');
  
          source.addEventListener('Eventdoownload', function(e) {
              // console.log("e:downloadFile"+e.data);
              downloadFile(e)
          }, false);
          
          // log textare show eventlog ouput 
          var linebuf;
          source.addEventListener('textarea', function(e) {
            // console.log("textarea", e.data);
         //   if (linebuf.indexOf("\r") > 0){
  
          //  }
            var datastream = window.atob(e.data);
            // console.log(e.data);
            // console.log(datastream);
         //   document.getElementById("terminal").value += datastream ;
            if (scrollcheck){
              document.getElementById("terminal").scrollTop = document.getElementById("terminal").scrollHeight;
            }
          }, false);
        }
        // SSE end
  </script>
  <script src=".js/keymouse.js"></script>
  <script src=".js/utf8string.js"></script>
</body>
</html>